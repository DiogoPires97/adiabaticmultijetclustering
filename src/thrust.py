"""
Calculate thrust values for Harrow algorithm and Diogo's Annealing algorithm,
using the respective algorithms outputs in the Results folder. 

The files describing the particles in the events generated by Pythia are also
used (and are available on the Events folder)
"""

import math


def parse_particles(e):
    # {pi_id : (px, py, pz)}
    particles = {}

    with open(events_file.format(e, "r")) as f:
        lines = f.readlines()

        pi_id = 1
        for line in lines:
            # line: id status px py pz E m
            pi = line.split()[2:5]
            particles[pi_id] = (float(pi[0]), float(pi[1]), float(pi[2]))
            pi_id += 1

    return particles


def parse_jets(file, e, ising=False):

    # (jet0, jet1)
    jets = ([], [])

    with open(file.format(e), "r") as f:
        lines = f.readlines()

        for line in lines:
            pid, jet = line.split()
            pid = int(pid)
            jet = int(jet)

            # convert Ising var into QUBO: {-1,1} -> {0,1}
            if ising:
                jet = (jet + 1) // 2

            jets[jet].append(pid)

    return jets


def calculate_thrust(particles, jet):

    jet_px = 0
    jet_py = 0
    jet_pz = 0
    for pid in jet:
        p = particles[pid]
        jet_px += p[0]
        jet_py += p[1]
        jet_pz += p[2]

    event_norms_sum = 0
    for p in particles.values():
        event_norms_sum += norm(p)

    return 2 * norm((jet_px, jet_py, jet_pz)) / event_norms_sum


def norm(p):
    px, py, pz = p
    return math.sqrt(px ** 2 + py ** 2 + pz ** 2)


if __name__ == "__main__":

    NUM_EVENTS = 110

    harrow_file = "Results/results_harrow{}.txt"
    annealing_file = "Results/results_clustering{}.txt"
    events_file = "Events/Ising_test{}.txt"

    for event in range(NUM_EVENTS):

        particles = parse_particles(event)

        harrow_jets = parse_jets(harrow_file, event)
        annealing_jets = parse_jets(annealing_file, event, ising=True)

        harrow_thrust1 = calculate_thrust(particles, harrow_jets[0])
        harrow_thrust2 = calculate_thrust(particles, harrow_jets[1])

        annealing_thrust1 = calculate_thrust(particles, annealing_jets[0])
        annealing_thrust2 = calculate_thrust(particles, annealing_jets[1])

        print("EVENT", event)
        print(
            "\tHarrow Jet1:",
            harrow_thrust1,
            "\tHarrow Jet2:",
            harrow_thrust2,
            "\t Avg:",
            (harrow_thrust1 + harrow_thrust2) / 2,
        )
        print(
            "\tAnnealing Jet1:",
            annealing_thrust1,
            "\tAnnealing Jet2:",
            annealing_thrust2,
            "\t Avg:",
            (annealing_thrust1 + annealing_thrust2) / 2,
        )
